[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "What a great post to comment! Yohoho...", "content_type": 8, "object_id": 1, "created_at": "2022-01-18T01:27:53.052Z", "modified_at": "2022-01-18T01:27:53.063Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "Let's comment author (_self). He is cool)", "content_type": 4, "object_id": 1, "created_at": "2022-01-18T01:27:53.052Z", "modified_at": "2022-01-18T01:27:53.063Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "What a great post!", "content_type": 8, "object_id": 1, "created_at": "2022-01-18T01:27:53.052Z", "modified_at": "2022-01-18T01:27:53.063Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 1, "content": "I like myself!", "content_type": 4, "object_id": 1, "created_at": "2022-01-18T01:27:53.052Z", "modified_at": "2022-01-18T01:27:53.063Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 1, "content": "Front Test", "content_type": 8, "object_id": 1, "created_at": "2022-01-19T04:56:59.365Z", "modified_at": "2022-01-19T04:56:59.365Z"}}, {"model": "blog.comment", "pk": 6, "fields": {"creator": 1, "content": "John was here.", "content_type": 8, "object_id": 3, "created_at": "2022-01-20T02:27:30.093Z", "modified_at": "2022-01-20T02:27:30.093Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "django"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "python3"}}, {"model": "blog.tag", "pk": 3, "fields": {"value": "populate"}}, {"model": "blog.tag", "pk": 4, "fields": {"value": "slug"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2022-01-17T20:15:49.113Z", "modified_at": "2022-01-17T20:18:26.467Z", "published_at": "2022-01-17T20:13:26Z", "title": "An example of slygified post in English", "slug": "an-example-slygified-post-in-english", "summary": "A short example of post Summary: Slugs works because of latin chars.", "content": "<h1>Slugify</h1>\r\n<p>To slugify non-latin chars we have to do make a few extra steps.</p>", "tags": [1, 2, 3, 4]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 1, "created_at": "2022-01-18T09:37:43.022Z", "modified_at": "2022-01-18T09:37:43.022Z", "published_at": "2022-01-18T09:36:37Z", "title": "Custom Filters", "slug": "custom-filters", "summary": "In Django templates, you can pass data through filters before it’s rendered.", "content": "This is done with the | (pipe) operator inside a rendering block. For example, to render a value in lowercase, using the lower filter, you’d do this:  {{ value|lower }}.\r\n\r\nSome filters accept arguments, which can be sent by adding : (colon) after the filter name. For example, the date filter takes an argument that specifies the output format: {{ post.published_at|date:\"M, d Y\" }}.", "tags": [1]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 2, "created_at": "2022-01-18T09:42:44.828Z", "modified_at": "2022-01-18T09:43:38.766Z", "published_at": "2022-01-18T09:43:31Z", "title": "Try It Out", "slug": "try-it-out", "summary": "First, we’ll update the index view to fetch all the Post objects in the system, and send them to the index.html template.", "content": "This should be functionality you’ve used with Django before. Your views.py will look something like:\r\n\r\ndef index(request):\r\n    posts = Post.objects.filter(published_at__lte=timezone.now())\r\n    return render(request, \"blog/index.html\", {\"posts\": posts})\r\n\r\nNote the use of the published_at__lte=timezone.now() filter. This means we’ll only load Post objects that have been published (have a publication date in the past).", "tags": [1]}}, {"model": "blango_auth.User", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$Q09Hd2pNUkZtcUFLQUpOTFEzTGtiMw$Wc/GRA9qmhaZZo3ZOdF10w", "last_login": "2022-01-20T10:09:53.655Z", "is_superuser": true, "username": "codio", "first_name": "Eric", "last_name": "Cartman", "email": "codio@example.com", "is_staff": true, "is_active": true, "date_joined": "2022-01-17T19:08:15Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.User", "pk": 2, "fields": {"password": "pbkdf2_sha256$260000$BWt9CkVFyE42iEWHbkSTWi$D9ynqCoTCAUr/gaqoJ2etRfnzuoGSCLvkQkHV98Vs2k=", "last_login": null, "is_superuser": false, "username": "student", "first_name": "John", "last_name": "Doe", "email": "jd@codio.com", "is_staff": false, "is_active": true, "date_joined": "2022-01-18T09:39:05Z", "groups": [], "user_permissions": [33, 34, 36, 29, 30, 32, 25, 26, 28]}}]
